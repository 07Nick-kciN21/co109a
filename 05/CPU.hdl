// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Or16(a=false, b=instruction, out[15]=isC, out[12]=a, out[11]=c1, out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6, out[5]=d1, out[4]=d2, out[3]=d3, out[2]=j1, out[1]=j2, out[0]=j3);
    
    // Mux16(a=ALUout, b=instruction, out=A_C);
    // Not(in=isC, out=nisc);
    // Or(a=nisc, b=d1, out=a_save);
    // ARegister(in=A_C, load=a_save, out=A_reg, out[0..14]=addressM);

    // Mux16(a=inM, b=A_reg, sel=a, out=A_M);, 

    // And(a=d2, b=isc, out=d_save);
    // Register(in=outM, load=d_save, out=D_reg);

    // ALU(x=D_reg, y=A_M, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=ALUout, zr=zr, ng=ng);
    // And(a=isC, b=d3, out=writeM);

    // And(a=ng, b=j1, out=JLT);
    // And(a=zr, b=j2, out=JEQ);
    // And(a=JLT, b=JEQ, out=J_LE);
    // Or(a=JLT, b=JEQ, out=GT);

    // Not(in=GT, out=JGT);
    // Or(a=J_LE, b=JGT, out=jump);
    // And(a=isC, b=jump, out=PC_LOAD);

    // PC(in=A_reg, load=PC_LOAD, inc=true, reset=reset, out=pc);

    // Not(in=instruction[15],out=ni);
	// Mux16(a=outtM,b=instruction,sel=ni,out=i);

	// Or(a=ni,b=instruction[5],out=intoA);
	// ARegister(in=i,load=intoA,out=A,out[0..14]=addressM);

	// And(a=instruction[15],b=instruction[12],out=AorM);
	// Mux16(a=A,b=inM,sel=AorM,out=AM);
	
	// ALU(x=D,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outtM,out=outM,zr=zr,ng=ng);

	// And(a=instruction[15],b=instruction[4],out=intoD);
	// DRegister(in=outtM,load=intoD,out=D);

	// And(a=instruction[15],b=instruction[3],out=writeM);

	// Not(in=ng,out=pos);
	// Not(in=zr,out=nzr);
	// And(a=instruction[15],b=instruction[0],out=jgt);
	// And(a=pos,b=nzr,out=posnzr);
	// And(a=jgt,b=posnzr,out=ld1);

	// And(a=instruction[15],b=instruction[1],out=jeq);
	// And(a=jeq,b=zr,out=ld2);

	// And(a=instruction[15],b=instruction[2],out=jlt);
	// And(a=jlt,b=ng,out=ld3);

	// Or(a=ld1,b=ld2,out=ldt);
	// Or(a=ld3,b=ldt,out=ld);

	// PC(in=A,load=ld,inc=true,reset=reset,out[0..14]=pc);
    Or16(a=false, b=instruction, out[15]=isC, out[12]=a, out[11]=c1, out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6, out[5]=d1, out[4]=d2, out[3]=d3, out[2]=j1, out[1]=j2, out[0]=j3);

    //Mux16-1
    Mux16(a=instruction, b=ALUout, out=Mux16out1);

    //A register
    Not(in=isC, out=isA);
    And(a=isC, b=d1, out=isCd1);
    or(a=isA, b=isCd1, out=Aload);
    ARegister(in=Mux16out1, load=Aload, out=Aout, out[0..14]=addressM);
    
    //Mux16-2
    Mux16(a=Aout, b=inM, sel=isC, out=Mux16out2);

    //D register
    And(a=isC, b=d2, out=isCd2);
    DRegister(in=ALUout, load=isCd2, out=Dout);

    //ALU
    ALU(a=Dout, b=Mux16out2,zx=c1, nx=c2, zy=c3, ny=c4,f=c5, no=c6, out=outM, zr=zr, ng=ng);

    //Jump
    And(a=ng, b=j1, out=jumpLT);              //if(out<0)
    And(a=zr, b=j2, out=jumpEQ);              //if(out=0)
    Or(a=ng, b=zr, out=ngzr);
    Not(in=ngzr, out=gt);
    And(a=gt, b=j3, out=jumpGT);              //if(out>0)

    Or(a=jumpLT, b=jumpEQ, out=jumpLE);
    Or(a=jumpLE, b=jumpGT, out=jump);

    //PC
    And(a=isC, b=jump, out=PCload);
    PC(in=Aout, load=PCload, reset=reset, inc=true, out[0..14]=pc);  //不是reset或是load就是inc要加一 inc就是位址的意思

    //writeM
    And(a=isC, b=d3, out=writeM)
    // Put your code here:
}